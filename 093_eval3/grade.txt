Grading at 12/08/2022:08:57:32.138285
For commit ID e60b55f287f3655e564680b7fb583f8a160bd1c9
Grading at Thu Dec  8 03:57:19 AM EST 2022
Doing some basic checking for your submission

Step 1
Checking that cyoa-step1 compiles
rm -f *~ cyoa-step1 cyoa-step2 cyoa-step3 cyoa-step4
g++ -pedantic -g --std=gnu++98 -Werror -Wall -o cyoa-step1 cyoa-step1.cpp
The code compiled (good)
Executable cyoa-step1 exists (good)
------------------------------------
Now running YOUR tests for step 1
------------------------------------


1.1: Current test is ./cyoa-step1 story1 < /dev/null
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind reported errors
Valgrind reported errors or memory leaks:
==1084349== Memcheck, a memory error detector
==1084349== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1084349== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1084349== Command: ./cyoa-step1 story1
==1084349== Parent PID: 1084348
==1084349== 
==1084349== 
==1084349== HEAP SUMMARY:
==1084349==     in use at exit: 1,488 bytes in 31 blocks
==1084349==   total heap usage: 319 allocs, 288 frees, 235,148 bytes allocated
==1084349== 
==1084349== 1,488 (720 direct, 768 indirect) bytes in 15 blocks are definitely lost in loss record 2 of 2
==1084349==    at 0x4849013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1084349==    by 0x10B4C9: Page::printOptions(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, long> > >) (Page.hpp:53)
==1084349==    by 0x10CFBF: Story::printStory() (Story.hpp:192)
==1084349==    by 0x10AA70: main (cyoa-step1.cpp:12)
==1084349== 
==1084349== LEAK SUMMARY:
==1084349==    definitely lost: 720 bytes in 15 blocks
==1084349==    indirectly lost: 768 bytes in 16 blocks
==1084349==      possibly lost: 0 bytes in 0 blocks
==1084349==    still reachable: 0 bytes in 0 blocks
==1084349==         suppressed: 0 bytes in 0 blocks
==1084349== 
==1084349== For lists of detected and suppressed errors, rerun with: -s
==1084349== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)


1.2: Current test is ./cyoa-step1 story2 < /dev/null
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind reported errors
Valgrind reported errors or memory leaks:
==1084386== Memcheck, a memory error detector
==1084386== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1084386== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1084386== Command: ./cyoa-step1 story2
==1084386== Parent PID: 1084385
==1084386== 
==1084386== 
==1084386== HEAP SUMMARY:
==1084386==     in use at exit: 1,200 bytes in 25 blocks
==1084386==   total heap usage: 232 allocs, 207 frees, 201,828 bytes allocated
==1084386== 
==1084386== 1,200 (576 direct, 624 indirect) bytes in 12 blocks are definitely lost in loss record 2 of 2
==1084386==    at 0x4849013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1084386==    by 0x10B4C9: Page::printOptions(std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, long> > >) (Page.hpp:53)
==1084386==    by 0x10CFBF: Story::printStory() (Story.hpp:192)
==1084386==    by 0x10AA70: main (cyoa-step1.cpp:12)
==1084386== 
==1084386== LEAK SUMMARY:
==1084386==    definitely lost: 576 bytes in 12 blocks
==1084386==    indirectly lost: 624 bytes in 13 blocks
==1084386==      possibly lost: 0 bytes in 0 blocks
==1084386==    still reachable: 0 bytes in 0 blocks
==1084386==         suppressed: 0 bytes in 0 blocks
==1084386== 
==1084386== For lists of detected and suppressed errors, rerun with: -s
==1084386== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)


1.3: Current test is ./cyoa-step1 story4 < /dev/null
-----------------------------
Great: we both considered this an error
----here is what you printed on stderr---
Invalid line format in story.txt: 
0:1a:I am ready for this story!
-----------------------------------------
Lets check if it valgrinds:
Valgrind was clean
No request to check for intermediate deadline completion on step 1

Step 2
Checking that cyoa-step2 compiles
rm -f *~ cyoa-step1 cyoa-step2 cyoa-step3 cyoa-step4
g++ -pedantic -g --std=gnu++98 -Werror -Wall -o cyoa-step2 cyoa-step2.cpp
The code compiled (good)
Executable cyoa-step2 exists (good)
------------------------------------
Now running YOUR tests for step 2
------------------------------------


2.1: Current test is ./cyoa-step2 story1  <  story1/inputs/input1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean


2.2: Current test is ./cyoa-step2 story1  <  story1/inputs/input2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean


2.3: Current test is ./cyoa-step2 story1  <  story1/inputs/input3.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean


2.4: Current test is ./cyoa-step2 story2  <  story2/inputs/input1.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean
No request to check for intermediate deadline completion on step 2

Step 3
Checking that cyoa-step3 compiles
rm -f *~ cyoa-step1 cyoa-step2 cyoa-step3 cyoa-step4
g++ -pedantic -g --std=gnu++98 -Werror -Wall -o cyoa-step3 cyoa-step3.cpp
The code compiled (good)
Executable cyoa-step3 exists (good)
------------------------------------
Now running YOUR tests for step 3
------------------------------------


3.1: Current test is ./cyoa-step3 story1 < /dev/null
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean


3.2: Current test is ./cyoa-step3 story2 < /dev/null
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean
No request to check for intermediate deadline completion on step 3

Step 4
Checking that cyoa-step4 compiles
rm -f *~ cyoa-step1 cyoa-step2 cyoa-step3 cyoa-step4
g++ -pedantic -g --std=gnu++98 -Werror -Wall -o cyoa-step4 cyoa-step4.cpp
The code compiled (good)
Executable cyoa-step4 exists (good)
------------------------------------
Now running YOUR tests for step 4
------------------------------------


4.1: Current test is ./cyoa-step4 story4  <  story3/inputs/input1.txt
-----------------------------
Great: we both considered this an error
----here is what you printed on stderr---
terminate called after throwing an instance of 'InvalidLine'
Invalid line format in story.txt: 
  what():  0:1a:I am ready for this story!
timeout: the monitored command dumped core
-----------------------------------------
Lets check if it valgrinds:
Valgrind was clean
No request to check for intermediate deadline completion on step 4

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
