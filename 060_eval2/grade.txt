Grading at 10/25/2022:20:43:17.610769
For commit ID f5f6719998ca97cd49582b2931b8b55a649ec657
Grading at Tue Oct 25 04:43:10 PM EDT 2022
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

2.2: Current test is story-step2 words1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.3: Current test is story-step2 words2.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

2.4: Current test is story-step2 words3.txt
-----------------------------
Your output looks good. Lets check valgrind
  - Valgrind was clean (no errors, no memory leaks)
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story.txt
-----------------------------
It looks like you got different output from us on that case.
Here is the diff (yours on left, ours on right):

Once upon a time, there was a walrus who lived in a very scar |	Once upon a time, there was a walrus who lived in a very pecu
cave. 								cave. 
Your file did not match the expected ouput


3.2: Current test is story-step3 words.txt story1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.3: Current test is story-step3 words.txt story2.txt
-----------------------------
It looks like you got different output from us on that case.
Here is the diff (yours on left, ours on right):

Once upon a time, there was a walrus. This walrus lived in a 	Once upon a time, there was a walrus. This walrus lived in a 
scary cave. One day, it left its scary cave and met a walrus. |	peculiar cave. One day, it left its peculiar cave and met a w
Your file did not match the expected ouput


3.4: Current test is story-step3 words.txt story3.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 words.txt story-test1.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind reported errors:
==883789== Memcheck, a memory error detector
==883789== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==883789== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==883789== Command: ./story-step4 words.txt story-test1.txt
==883789== Parent PID: 883788
==883789== 
==883789== Invalid read of size 4
==883789==    at 0x48E315D: getdelim (iogetdelim.c:52)
==883789==    by 0x1098CA: parseStoryLine (rand_story.c:90)
==883789==    by 0x109516: main (story-step4.c:32)
==883789==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==883789== 
==883789== 
==883789== Process terminating with default action of signal 11 (SIGSEGV)
==883789==  Access not within mapped region at address 0x0
==883789==    at 0x48E315D: getdelim (iogetdelim.c:52)
==883789==    by 0x1098CA: parseStoryLine (rand_story.c:90)
==883789==    by 0x109516: main (story-step4.c:32)
==883789==  If you believe this happened as a result of a stack
==883789==  overflow in your program's main thread (unlikely but
==883789==  possible), you can try to increase the size of the
==883789==  main thread stack using the --main-stacksize= flag.
==883789==  The main thread stack size used in this run was 8388608.
==883789== 
==883789== HEAP SUMMARY:
==883789==     in use at exit: 234 bytes in 16 blocks
==883789==   total heap usage: 35 allocs, 19 frees, 5,645 bytes allocated
==883789== 
==883789== For a detailed leak analysis, rerun with: --leak-check=full
==883789== 
==883789== For lists of detected and suppressed errors, rerun with: -s
==883789== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.2: Current test is story-step4 -n words.txt story-test2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind reported errors:
==883828== Memcheck, a memory error detector
==883828== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==883828== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==883828== Command: ./story-step4 -n words.txt story-test2.txt
==883828== Parent PID: 883827
==883828== 
==883828== Invalid read of size 4
==883828==    at 0x48E315D: getdelim (iogetdelim.c:52)
==883828==    by 0x1098CA: parseStoryLine (rand_story.c:90)
==883828==    by 0x109516: main (story-step4.c:32)
==883828==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==883828== 
==883828== 
==883828== Process terminating with default action of signal 11 (SIGSEGV)
==883828==  Access not within mapped region at address 0x0
==883828==    at 0x48E315D: getdelim (iogetdelim.c:52)
==883828==    by 0x1098CA: parseStoryLine (rand_story.c:90)
==883828==    by 0x109516: main (story-step4.c:32)
==883828==  If you believe this happened as a result of a stack
==883828==  overflow in your program's main thread (unlikely but
==883828==  possible), you can try to increase the size of the
==883828==  main thread stack using the --main-stacksize= flag.
==883828==  The main thread stack size used in this run was 8388608.
==883828== 
==883828== HEAP SUMMARY:
==883828==     in use at exit: 234 bytes in 16 blocks
==883828==   total heap usage: 35 allocs, 19 frees, 5,645 bytes allocated
==883828== 
==883828== For a detailed leak analysis, rerun with: --leak-check=full
==883828== 
==883828== For lists of detected and suppressed errors, rerun with: -s
==883828== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
